{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bot752\\\\Desktop\\\\code\\\\code\\\\@React_Udemy_Max\\\\Practice_project_on_React_Router_with_backend_api\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport { json, redirect, useRouteLoaderData, defer, Await } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const {\n    event,\n    events\n  } = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Await, {\n      resolve: event,\n      children: loadEvent => /*#__PURE__*/_jsxDEV(EventItem, {\n        event: loadEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(EventDetailPage, \"RYHFM3+vnAtCT3vK8ii1+i0+Nsk=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nasync function loadEvent(id) {\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch details for selected event\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.event;\n  }\n}\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //  return { isError: true, message: \"Could not fetch events!\" };\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  return defer({\n    event: loadEvent(id),\n    events: loadEvents()\n  });\n}\nexport async function action({\n  request,\n  params\n}) {\n  const eventId = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: \"Could not delete event\"\n    }, {\n      status: 500\n    });\n  }\n  return redirect(\"/events\");\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["json","redirect","useRouteLoaderData","defer","Await","EventItem","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","event","events","children","resolve","loadEvent","fileName","_jsxFileName","lineNumber","columnNumber","loadEvents","_c","id","response","fetch","ok","message","status","resData","loader","request","params","eventId","action","method","$RefreshReg$"],"sources":["C:/Users/bot752/Desktop/code/code/@React_Udemy_Max/Practice_project_on_React_Router_with_backend_api/12-adv-starting-project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import {\r\n  json,\r\n  redirect,\r\n  useRouteLoaderData,\r\n  defer,\r\n  Await,\r\n} from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nconst EventDetailPage = () => {\r\n  const { event, events } = useRouteLoaderData(\"event-detail\");\r\n\r\n  return (\r\n    <>\r\n      <Await resolve={event}>\r\n        {(loadEvent) => <EventItem event={loadEvent} />}\r\n      </Await>\r\n      <Await resolve={events}>\r\n        {(loadEvents) => <EventsList events={loadEvents} />}\r\n      </Await>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EventDetailPage;\r\n\r\nasync function loadEvent(id) {\r\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not fetch details for selected event\" },\r\n      { status: 500 }\r\n    );\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.event;\r\n  }\r\n}\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    //  return { isError: true, message: \"Could not fetch events!\" };\r\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json(\r\n      { message: \"Could not fetch events.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\nexport async function loader({ request, params }) {\r\n  const id = params.eventId;\r\n\r\n  return defer({\r\n    event: loadEvent(id),\r\n    events: loadEvents(),\r\n  });\r\n}\r\n\r\nexport async function action({ request, params }) {\r\n  const eventId = params.eventId;\r\n\r\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\r\n    method: request.method,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw json({ message: \"Could not delete event\" }, { status: 500 });\r\n  }\r\n\r\n  return redirect(\"/events\");\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}